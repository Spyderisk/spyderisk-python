#!/usr/bin/python3.9

# Copyright 2024 University of Southampton IT Innovation Centre

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# <!-- SPDX-License-Identifier: Apache 2.0 -->
# <!-- SPDX-FileCopyrightText: 2024 The University of Southampton IT Innovation Centre -->
# <!-- SPDX-ArtifactOfProjectName: Spyderisk -->
# <!-- SPDX-FileType: Source code -->
# <!-- SPDX-FileComment: Original by Stephen Phillips, June 2024 -->

from rdflib import Namespace, RDF, RDFS, OWL, DCTERMS

GRAPH = {
    "core": Namespace("http://it-innovation.soton.ac.uk/ontologies/trustworthiness/core#"),
    "domain": Namespace("http://it-innovation.soton.ac.uk/ontologies/trustworthiness/domain#"),
    "system": Namespace("http://it-innovation.soton.ac.uk/ontologies/trustworthiness/system#")
}

PREDICATE = {
        "type": RDF.type,
        "comment": RDFS.comment,
        "domain": RDFS.domain,
        "label": RDFS.label,
        "range": RDFS.range,
        "sub_class_of": RDFS.subClassOf,
        "version_info": OWL.versionInfo,
        "modified": DCTERMS.modified,
        "created": DCTERMS.created,

        "acceptance_justification": GRAPH['core'].acceptanceJustification,
        "affected_by": GRAPH['core'].affectedBy,
        "affects": GRAPH['core'].affects,
        "applies_to": GRAPH['core'].appliesTo,
        "blocked_by": GRAPH['core'].blockedBy,
        "blocks": GRAPH['core'].blocks,
        "caused_by": GRAPH['core'].causedBy,
        "causes_control": GRAPH['core'].causesControl,
        "causes_direct_misbehaviour": GRAPH['core'].causesDirectMisbehaviour,
        "causes_indirect_misbehaviour": GRAPH['core'].causesIndirectMisbehaviour,
        "created_by_pattern": GRAPH['core'].createdByPattern,
        "displayed_at": GRAPH['core'].displayedAt,
        "displayed_at_asset": GRAPH['core'].displayedAtAsset,
        "displayed_at_link": GRAPH['core'].displayedAtLink,
        "displayed_at_node": GRAPH['core'].displayedAtNode,
        "displayed_at_relation_from": GRAPH['core'].displayedAtRelationFrom,
        "displayed_at_relation_to": GRAPH['core'].displayedAtRelationTo,
        "displayed_at_relation_type": GRAPH['core'].displayedAtRelationType,
        "domain_graph": GRAPH['core'].domainGraph,
        "domain_version": GRAPH['core'].domainVersion,
        "has_action": GRAPH['core'].hasAction,
        "has_asserted_level": GRAPH['core'].hasAssertedLevel,
        "has_asserted_link": GRAPH['core'].hasAssertedLink,
        "has_asserted_node": GRAPH['core'].hasAssertedNode,
        "has_asset": GRAPH['core'].hasAsset,
        "has_blocking_effect": GRAPH['core'].hasBlockingEffect,
        "has_cascading_threat": GRAPH['core'].hasCascadingThreat,
        "has_category": GRAPH['core'].hasCategory,
        "has_control": GRAPH['core'].hasControl,
        "has_control_condition": GRAPH['core'].hasControlCondition,
        "has_control_set": GRAPH['core'].hasControlSet,
        "has_coverage_level": GRAPH['core'].hasCoverageLevel,
        "has_default_level": GRAPH['core'].hasDefaultLevel,
        "has_distinct_node_group": GRAPH['core'].hasDistinctNodeGroup,
        "has_domain_pattern_ui_setting": GRAPH['core'].hasDomainPatternUISetting,
        "has_effect": GRAPH['core'].hasEffect,
        "has_entry_point": GRAPH['core'].hasEntryPoint,
        "has_frequency": GRAPH['core'].hasFrequency,
        "has_id": GRAPH['core'].hasID,
        "has_impact_level": GRAPH['core'].hasImpactLevel,
        "has_inferred_level": GRAPH['core'].hasInferredLevel,
        "has_inferred_link": GRAPH['core'].hasInferredLink,
        "has_inferred_node": GRAPH['core'].hasInferredNode,
        "has_inferred_node_setting": GRAPH['core'].hasInferredNodeSetting,
        "has_key": GRAPH['core'].hasKey,
        "has_key_node": GRAPH['core'].hasKeyNode,
        "has_level": GRAPH['core'].hasLevel,
        "has_link": GRAPH['core'].hasLink,
        "has_mandatory_control_set": GRAPH['core'].hasMandatoryCS,
        "has_mandatory_node": GRAPH['core'].hasMandatoryNode,
        "has_matching_pattern": GRAPH['core'].hasMatchingPattern,
        "has_max": GRAPH['core'].hasMax,
        "has_metadata": GRAPH['core'].hasMetadata,
        "has_min": GRAPH['core'].hasMin,
        "has_misbehaviour": GRAPH['core'].hasMisbehaviour,
        "has_misbehaviour_set": GRAPH['core'].hasMisbehaviourSet,
        "has_mitigation_level": GRAPH['core'].hasMitigationLevel,
        "has_necessary_node": GRAPH['core'].hasNecessaryNode,
        "has_node": GRAPH['core'].hasNode,
        "has_optional_cs": GRAPH['core'].hasOptionalCS,
        "has_optional_node": GRAPH['core'].hasOptionalNode,
        "has_prior": GRAPH['core'].hasPrior,
        "has_priority": GRAPH['core'].hasPriority,
        "has_rohibited_link": GRAPH['core'].hasProhibitedLink,
        "has_prohibited_node": GRAPH['core'].hasProhibitedNode,
        "has_risk": GRAPH['core'].hasRisk,
        "has_role": GRAPH['core'].hasRole,
        "has_root_cause": GRAPH['core'].hasRootCause,
        "has_root_node": GRAPH['core'].hasRootNode,
        "has_root_pattern": GRAPH['core'].hasRootPattern,
        "has_secondary_effect_condition": GRAPH['core'].hasSecondaryEffectCondition,
        "has_secondary_node": GRAPH['core'].hasSecondaryNode,
        "has_sufficient_node": GRAPH['core'].hasSufficientNode,
        "has_twa": GRAPH['core'].hasTrustworthinessAttribute,
        "has_value": GRAPH['core'].hasValue,
        "height": GRAPH['core'].height,
        "hidden": GRAPH['core'].hidden,
        "immutable": GRAPH['core'].immutable,
        "imports_graph": GRAPH['core'].importsGraph,
        "includes_node_in_uri": GRAPH['core'].includesNodeInURI,
        "independent_levels": GRAPH['core'].independentLevels,
        "inhibited": GRAPH['core'].inhibited,
        "inhibited_by": GRAPH['core'].inhibitedBy,
        "is_active": GRAPH['core'].isActive,
        "is_assertable": GRAPH['core'].isAssertable,
        "is_blacklisted": GRAPH['core'].isBlacklisted,
        "is_calculating_risk": GRAPH['core'].isCalculatingRisk,
        "is_construction_state": GRAPH['core'].isConstructionState,
        "is_current_risk": GRAPH['core'].isCurrentRisk,
        "is_nabled": GRAPH['core'].isEnabled,
        "is_expanded": GRAPH['core'].isExpanded,
        "is_external_cause": GRAPH['core'].isExternalCause,
        "is_future_risk": GRAPH['core'].isFutureRisk,
        "is_initial_cause": GRAPH['core'].isInitialCause,
        "is_normal_op": GRAPH['core'].isNormalOp,
        "is_normal_op_effect": GRAPH['core'].isNormalOpEffect,
        "is_proposed": GRAPH['core'].isProposed,
        "is_root_cause": GRAPH['core'].isRootCause,
        "is_secondary_threat": GRAPH['core'].isSecondaryThreat,
        "is_triggered": GRAPH['core'].isTriggered,
        "is_valid": GRAPH['core'].isValid,
        "is_validating": GRAPH['core'].isValidating,
        "is_visible": GRAPH['core'].isVisible,
        "is_work_in_progress": GRAPH['core'].isWorkInProgress,
        "iterate": GRAPH['core'].iterate,
        "level_value": GRAPH['core'].levelValue,
        "link_type": GRAPH['core'].linkType,
        "links_from": GRAPH['core'].linksFrom,
        "links_to": GRAPH['core'].linksTo,
        "located_at": GRAPH['core'].locatedAt,
        "max_cardinality": GRAPH['core'].maxCardinality,
        "max_of": GRAPH['core'].maxOf,
        "meta_has_asset": GRAPH['core'].metaHasAsset,
        "meta_links_from": GRAPH['core'].metaLinksFrom,
        "meta_links_to": GRAPH['core'].metaLinksTo,
        "meta_located_at": GRAPH['core'].metaLocatedAt,
        "meta_property": GRAPH['core'].metaProperty,
        "min_cardinality": GRAPH['core'].minCardinality,
        "min_of": GRAPH['core'].minOf,
        "mitigated_by": GRAPH['core'].mitigatedBy,
        "mitigates": GRAPH['core'].mitigates,
        "parent": GRAPH['core'].parent,
        "population": GRAPH['core'].population,
        "position_x": GRAPH['core'].positionX,
        "position_y": GRAPH['core'].positionY,
        "requires_treatment_of": GRAPH['core'].requiresTreatmentOf,
        "risk_calculation_mode": GRAPH['core'].riskCalculationMode,
        "risks_valid": GRAPH['core'].risksValid,
        "source_cardinality": GRAPH['core'].sourceCardinality,
        "strength": GRAPH['core'].strength,
        "target_cardinality": GRAPH['core'].targetCardinality,
        "threatens": GRAPH['core'].threatens,
        "treats": GRAPH['core'].treats,
        "triggered": GRAPH['core'].triggered,
        "triggered_by": GRAPH['core'].triggeredBy,
        "triggers": GRAPH['core'].triggers,
        "width": GRAPH['core'].width,
        }

OBJECT = {
        "asset": OWL.Class,
        "relation": OWL.ObjectProperty,

        #"asset": GRAPH['core'].Asset,
        "asset_group": GRAPH['core'].AssetGroup,
        "ca_setting": GRAPH['core'].CASetting,
        "cardinality_constraint": GRAPH['core'].CardinalityConstraint,
        "compliance_set": GRAPH['core'].ComplianceSet,
        "composite_thing": GRAPH['core'].CompositeThing,
        "construction_pattern": GRAPH['core'].ConstructionPattern,
        "control": GRAPH['core'].Control,
        "control_inference_pattern": GRAPH['core'].ControlInferencePattern,
        "control_set": GRAPH['core'].ControlSet,
        "control_strategy": GRAPH['core'].ControlStrategy,
        "default_setting": GRAPH['core'].DefaultSetting,
        "distinct_node_group": GRAPH['core'].DistinctNodeGroup,
        "domain_pattern_ui_setting": GRAPH['core'].DomainPatternUISetting,
        "impact_level": GRAPH['core'].ImpactLevel,
        "inferred_node_setting": GRAPH['core'].InferredNodeSetting,
        "level": GRAPH['core'].Level,
        "likelihood": GRAPH['core'].Likelihood,
        "link": GRAPH['core'].Link,
        "ma_default_setting": GRAPH['core'].MADefaultSetting,
        "matching_pattern": GRAPH['core'].MatchingPattern,
        "metadata_pair": GRAPH['core'].MetadataPair,
        "misbehaviour": GRAPH['core'].Misbehaviour,
        "misbehaviour_inhibition_set": GRAPH['core'].MisbehaviourInhibitionSet,
        "misbehaviour_set": GRAPH['core'].MisbehaviourSet,
        "mitigation_level": GRAPH['core'].MitigationLevel,
        "mitigation_set": GRAPH['core'].MitigationSet,
        "node": GRAPH['core'].Node,
        "pattern": GRAPH['core'].Pattern,
        "population_level": GRAPH['core'].PopulationLevel,
        "risk_level": GRAPH['core'].RiskLevel,
        "role": GRAPH['core'].Role,
        "role_link": GRAPH['core'].RoleLink,
        "root_pattern": GRAPH['core'].RootPattern,
        "set_member": GRAPH['core'].SetMember,
        "setting": GRAPH['core'].Setting,
        "twaa_default_setting": GRAPH['core'].TWAADefaultSetting,
        "threat": GRAPH['core'].Threat,
        "threat_category": GRAPH['core'].ThreatCategory,
        "triplet_member": GRAPH['core'].TripletMember,
        "trustworthiness_attribute": GRAPH['core'].TrustworthinessAttribute,
        "trustworthiness_attribute_set": GRAPH['core'].TrustworthinessAttributeSet,
        "trustworthiness_impact_set": GRAPH['core'].TrustworthinessImpactSet,
        "trustworthinesslevel": GRAPH['core'].TrustworthinessLevel,
        "validation_pattern": GRAPH['core'].ValidationPattern,
        }

